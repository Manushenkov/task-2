function prepareData(rawData, sprintObj) {
  try {
  // –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ id –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ
  const sprintId = sprintObj['sprintId'];

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤—ã –ø–æ —Ç–∏–ø—É
  const commits = [];
  const comments = [];
  const summary = [];
  const users = [];
  const sprints = [];
  rawData.forEach(element =>{
    if (element.type == 'Comment'){
      comments.push(element)
    } else if (element.type == 'Summary'){
      summary.push(element)
    } else if (element.type == 'Commit'){
      commits.push(element)
      } else if (element.type == 'Sprint'){
      sprints.push(element)
      } else if (element.type == 'User'){
      users.push(element)
      }
    });
  // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø—Ä–∏—Ç–Ω–æ–≤
  sprints.sort((sprintA, sprintB) =>{
    return sprintA.id - sprintB.id
  });

  // —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü —Ç–µ–∫—É—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
  let currentSprintStart;
  let currentSprintFinish;
  let currentSprintIndex;
  for (sprint in sprints) {
    if (sprints[sprint].id == sprintId) {
       currentSprintStart = sprints[sprint].startAt;
       currentSprintFinish = sprints[sprint].finishAt;
       currentSprintIndex = sprint
       previousSprintIndex = sprint - 1
       break;
    };
  };

  // –ö–∞—Ä–∫–∞—Å vote
  const vote = {
    "alias": "vote",
    "data": {
      "title": "–°–∞–º—ã–π üîé –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
      "subtitle": "",
      "emoji": "üîé",
      "users": []
    }
  };

  try {
    vote.data.subtitle = sprints[currentSprintIndex].name
  } catch {
    console.log("sprint name is empty")
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –µ–º—É valueText –¥–ª—è vote –ø—É—Ç—ë–º –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
  let voteStatistics = [];
  for (let i = 0; i < users.length + 1; ++i){
    voteStatistics.push(0)
  };

  comments.forEach(comment =>{
    if (comment.createdAt >= currentSprintStart && comment.createdAt <= currentSprintFinish) {
      voteStatistics[comment.author] += comment.likes.length
    }
  });

  // –°–±–æ—Ä–∫–∞ vote. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö valueText 
  users.forEach(user => {
    vote.data.users.push({"id": user.id, "name": user.name, "avatar": user.avatar, "valueText": voteStatistics[user.id] != undefined ? voteStatistics[user.id].toString() : ""})
  });

  vote.data.users.sort((userA, userB) =>{
    return userB.valueText - userA.valueText;
  });
  
  //—Ñ—É–Ω–∫—Ü–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤,
  //–≤–∑—è–ª –æ—Ç—Å—é–¥–∞ https://realadmin.ru/coding/sklonenie-na-javascript.html
  function declOfNum(n, text_forms) {  
    n = Math.abs(n) % 100; var n1 = n % 10;
    if (n > 10 && n < 20) { return text_forms[2]; }
    if (n1 > 1 && n1 < 5) { return text_forms[1]; }
    if (n1 == 1) { return text_forms[0]; }
    return text_forms[2];
  }

  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
  vote.data.users.forEach(user => {
    user.valueText += declOfNum(user.valueText, [" –≥–æ–ª–æ—Å", " –≥–æ–ª–æ—Å–∞", " –≥–æ–ª–æ—Å–æ–≤"])
  });
  
  

  // –∫–∞—Ä–∫–∞—Å leaders
  const leaders = {
  "alias": "leaders",
  "data": {
    "title": "–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤",
    "subtitle": sprints[currentSprintIndex].name,
    "emoji": "üëë",
    "users": []
    }
  };
  let border1
  let border2
  for (let i = 0; i < sprints.length; i++) {
    if (sprintId == sprints[i].id) {
      border1 = sprints[i].startAt
      border2 = sprints[i].finishAt
      break
    }
  }

  let usersObj = {}
  commits.forEach(commit => {
    if (commit.timestamp <= border2) {
      if (commit.timestamp >= border1) {
        if (usersObj[commit.author] == undefined) {usersObj[commit.author] = 0}
        usersObj[commit.author] += 1
      }
    }
  })

  let leadersUsers = []
 
  users.forEach(user => {
    leadersUsers.push({"id": user.id, "name": user.name, "avatar": user.avatar, "valueText": usersObj[user.id] != undefined ? `${usersObj[user.id]}` : "0"})
  }) 
  leadersUsers.sort((userA, userB) => {
      if (userA.valueText - userB.valueText == 0 ) {
        return userB.id - userA.id
      } else {
        return +userB.valueText - +userA.valueText
      }
    })
 

  leaders.data.users = JSON.parse(JSON.stringify(leadersUsers))

/*


  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –µ–º—É valueText –¥–ª—è leaders –ø—É—Ç—ë–º –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ —Å –∫–æ–º–º–∏—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
  let leadersStatistics = JSON.parse(JSON.stringify(users));
  leadersStatistics.sort((a, b) => {
    return a.id - b.id
  })
  for (let i = 0; i < users.length; ++i){
    leadersStatistics[i].valueText = 0
  };
  commits.forEach(commit =>{
    if (commit.timestamp > currentSprintStart && commit.timestamp < currentSprintFinish) {
      for (let i = 0; i < leadersStatistics.length; i++) {
        if (leadersStatistics[i].id == commit.author) {
          ++leadersStatistics[i].valueText
          break
        }
      }
    }
  });

*/


/*
  // –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ leaders –ø–æ —É–º–µ–Ω—à–µ–Ω–∏—é valueText

  // –¥–æ–±–∞–≤–ª–µ–Ω–µ —é–∑–µ—Ä–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –≤ likes 
  users.forEach(user => {
    user.likes = leadersStatistics[user.id]
  })
  // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–∞–π–∫–∞–º
  users.sort((userA, userB) => {
    if (userB.likes - userA.likes > 0) {
      return 1
    } else {
      return -1
    }
      // return userB.likes - userA.likes
  })

  // —Å–±–æ—Ä users 
  for (let i = 0; i < users.length; ++i){
    let userToAdd = {"id": users[i].id, "name": users[i].name, "avatar": users[i].avatar, "valueText": users[i].likes.toString()};
    leaders.data.users.push(userToAdd);
  }
*/

  // –ü–µ—Ä–µ–Ω–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ leaders –ø–æ —É–º–µ–Ω—à–µ–Ω–∏—é valueText

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ users –ø–æ id, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å –≤ users —Å–æ–æ—Ç–Ω–æ—Å–∏–ª—Å—è —Å –∏–Ω–¥–µ–∫—Å–æ–º –≤ leadersStatistics

  // for (let i = 0; i < users.length; ++i){
  //   let maxValue = Math.max(...leadersStatistics);
  //   let userId = leadersStatistics.indexOf(maxValue);
  //   let userToAdd = {"id": users[userId - 1].id, "name": users[userId - 1].name, "avatar": users[userId - 1].avatar, "valueText": maxValue != undefined ? maxValue.toString() : ""};
  //   leaders.data.users.push(JSON.parse(JSON.stringify(userToAdd)));
  //   leadersStatistics[userId] = -1;
  // };


/*
    leaders.data.users = JSON.parse(JSON.stringify(leadersStatistics));
    leaders.data.users.forEach(user => {
      delete user.friends
      delete user.comments
      delete user.commits
      delete user.login
      delete user.type
      user.valueText = user.valueText.toString()
    })
    leaders.data.users.sort((userA, userB) => {
      if (userA.valueText - userB.valueText == 0 ) {
        return userA.id - userB.id
      } else {
        return +userB.valueText - +userA.valueText
      }
    })
*/

  // –∫–∞—Ä–∫–∞—Å chart
  const chart = {
    "alias": "chart",
    "data": {
      "title": "–ö–æ–º–º–∏—Ç—ã",
      "subtitle": sprints[currentSprintIndex].name,
      "values": [],
    "users": []
    }
  };


  // –°–æ–∑–¥–∞–Ω–∏–µ commits –≤ sprints –¥–ª—è –∫–æ–ª–∏—á–µ—Å–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤
  for (sprint in sprints){
    sprints[sprint].commits = 0;
    // —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª-—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –¥–∞–Ω–Ω—ã–µ –¥–ª—è diagram
    if (sprint == currentSprintIndex || sprint == currentSprintIndex - 1){

      sprints[sprint].tinyCommits = 0;
      sprints[sprint].smallCommits = 0;
      sprints[sprint].bigCommits = 0;
      sprints[sprint].hugeCommits = 0;

      // –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø—Ä–∏—Ç–æ–≤
      sprints[sprint].firstSummary = Number.POSITIVE_INFINITY;
      sprints[sprint].lastSummary = Number.NEGATIVE_INFINITY;
    } 
  }

  // –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∫–æ–º–º–∏—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è diagram –∏ activity
  let currentSprintCommits = [];
  let previousSprintCommits = [];



  // –§—É–Ω–∫—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∏—â—É—â–∞—è –∫ –∫–∞–∫–æ–º—É —Å–ø—Ä–∏–Ω—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–º–º–∏—Ç, –Ω–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ 
  // –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞, –±—É–¥–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤
  let binarySearch = (commit) =>{
    let left = -1;
    let right = sprints.length + 1;
    let middle = Math.floor((left + right) / 2);
    let i = Math.ceil(Math.log2(sprints.length) + 2)
    while (i != 0) {
      i--
      if (commit.timestamp < sprints[middle].startAt) { //–µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –º–µ–Ω—å—à–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        right = middle;
        middle = Math.floor((left + right) / 2);
      } else if (commit.timestamp > sprints[middle].finishAt) { //–µ—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –±–æ–ª—å—à–µ–π
        left = middle;
        middle = Math.floor((left + right) / 2);
      } else {

        // –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è diagram
        // –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —Å–ø—Ä–∏–Ω—Ç id –∫—Ä–∞–π–Ω–∏—Ö summary 
        // –≤—ã–Ω–µ—Å–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø—Ä–∏—Ç–Ω–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
        if (middle == currentSprintIndex) {
          currentSprintCommits.push(commit) //–≤—ã–Ω–µ—Å–µ–Ω–∏–µ 
          if (commit.summaries[commit.summaries.length - 1] >= sprints[currentSprintIndex].lastSummary){
            sprints[currentSprintIndex].lastSummary = commit.summaries[commit.summaries.length - 1]
          }
          if (commit.summaries[0] < sprints[currentSprintIndex].firstSummary){
            sprints[currentSprintIndex].firstSummary = commit.summaries[0]
          }
        } else if (middle == currentSprintIndex - 1) { 
            previousSprintCommits.push(commit); //–≤—ã–Ω–µ—Å–µ–Ω–∏–µ
            if (commit.summaries[commit.summaries.length - 1] >= sprints[currentSprintIndex - 1].lastSummary){
              sprints[currentSprintIndex - 1].lastSummary = commit.summaries[commit.summaries.length - 1]
            }
            if (commit.summaries[0] < sprints[currentSprintIndex - 1].firstSummary){
              sprints[currentSprintIndex - 1].firstSummary = commit.summaries[0]
            }
        }

        return middle //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å–ø—Ä–∏—Ç–Ω–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–º–º–∏—Ç
      }
    }
  };

  // –ø–µ—Ä–µ–±–æ—Ä, –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞ –≤ –ø–æ–ª—å–∑—É –±–∏–Ω–∞—Ä–∫–∏ 
  let search = (commit) =>{
    sprints.forEach(sprint =>{
      if (commit.timestamp >= sprint.startAt && commit.timestamp <= sprint.finishAt){
          if (commit.id == sprints[currentSprintIndex]) {
          currentSprintCommits.push(commit) //–≤—ã–Ω–µ—Å–µ–Ω–∏–µ 
          if (commit.summaries[commit.summaries.length - 1] >= sprints[currentSprintIndex].lastSummary){
            sprints[currentSprintIndex].lastSummary = commit.summaries[commit.summaries.length - 1]
          }
          if (commit.summaries[0] < sprints[currentSprintIndex].firstSummary){
            sprints[currentSprintIndex].firstSummary = commit.summaries[0]
          }
        } else if (commit.id == sprints[currentSprintIndex - 1]) { 
            previousSprintCommits.push(commit); //–≤—ã–Ω–µ—Å–µ–Ω–∏–µ
            if (commit.summaries[commit.summaries.length - 1] >= sprints[currentSprintIndex - 1].lastSummary){
              sprints[currentSprintIndex - 1].lastSummary = commit.summaries[commit.summaries.length - 1]
            }
            if (commit.summaries[0] < sprints[currentSprintIndex - 1].firstSummary){
              sprints[currentSprintIndex - 1].firstSummary = commit.summaries[0]
            }
        }
        return sprints.indexOf(sprint)
      }
    })
    return false
  };
  // –ø–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–∏—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Å–ø—Ä–∏–Ω—Ç–µ
  

  commits.forEach(commit =>{
    sprints[binarySearch(commit)].commits += 1
  });

  // —Å–±–æ—Ä values –≤ chart
  sprints.forEach(sprint =>{
    chart.data.values.push({"title": sprint.id.toString(), "hint": sprint.name, "value": sprint.commits})
  });

  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ "actuve": true
  for (element in chart.data.values){
    if (chart.data.values[element].title == sprintId){
      chart.data.values[element].active = true;
      break;
    }
  }
  

  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ users, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ leaders
  // chart.data.users = leaders.data.users.slice();
  chart.data.users = JSON.parse(JSON.stringify(leaders.data.users));
  // –ù–∞—á–∞–ª–æ –∑–æ–Ω—ã 4 –ø–æ–¥–∑–∞–¥–∞–Ω–∏—è
  
  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–æ–≤
  sprints[currentSprintIndex].tinyCommits = 0;
  sprints[currentSprintIndex].smallCommits = 0;
  sprints[currentSprintIndex].bigCommits = 0;
  sprints[currentSprintIndex].hugeCommits = 0;
  sprints[currentSprintIndex - 1].tinyCommits = 0;
  sprints[currentSprintIndex - 1].smallCommits = 0;
  sprints[currentSprintIndex - 1].bigCommits = 0;
  sprints[currentSprintIndex - 1].hugeCommits = 0;

  // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ —Ç–µ–∫—É—â–∏—Ö –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤
  currentSprintCommits.sort((a, b) => {
    if (a.summaries.length != 0 && b.summaries.length != 0){
      return b.summaries[0] - a.summaries[0]
    }
    return 0
  })

  previousSprintCommits.sort((a, b) => {
    if (a.summaries.length != 0 && b.summaries.length != 0){
      return b.summaries[0] - a.summaries[0]
    }
    return 0
  })


  // –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ current SprintCommits –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –Ω—É–ª–µ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
  // –ö–æ–ø–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–∑–∞–¥–∞—á–∏, –Ω—É–ª–∏ –º–µ—à–∞—é—Ç –±–∏–Ω–∞—Ä–Ω–æ–º—É –ø–æ–∏—Å–∫—É
  let currentSprintCommitsWithEmptyCommits = JSON.parse(JSON.stringify(currentSprintCommits))
  currentSprintCommits.forEach(commit =>{
  if (commit.summaries.length == 0) {
    currentSprintCommits.splice(currentSprintCommits.indexOf(commit), 1)
    }
  })

  previousSprintCommits.forEach(commit =>{
    if (commit.summaries.length == 0) {
      previousSprintCommits.splice(previousSprintCommits.indexOf(commit), 1)
    }
  })



  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–º–º–∏—Ç–∞–º–∏ —Ç–µ–∫—É—â–∏—Ö –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ø—Ä–∏–Ω—Ç–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–º–∏—Ç–∞
   currentSprintCommits.forEach(commit => {
    commit.commitSize = 0
   })
   previousSprintCommits.forEach(commit => {
    commit.commitSize = 0
   })



  // –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ summary –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É commit



  // —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è sumarry –≤ –∫–æ–º–º–∏—Ç–µ
  let hasSummary = (commit, summary) => {
    for (summaryInCommit in commit.summaries) {
      if (commit.summaries[summaryInCommit] == summary) {
        return true;
      }
    }
    return false;
  }

  // —Ñ-–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è summaries –∫–æ–º–º–∏—Ç–∞ –∏ summary
  let summaryIsMore = (commit, summary) => {
    for (summaryInCommit in commit.summaries) {
      if (commit.summaries[summaryInCommit] >= summary) {
        return false
      }
    }
    return true
  }

  let summaryIsLess = (commit, summary) => {
    for (summaryInCommit in commit.summaries) {
      if (commit.summaries[summaryInCommit] <= summary) {
        return false
      }
    }
    return true
  }

  // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –Ω—É–∂–Ω–∞—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±–∏—Ä–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
  // –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ –≥—Ä–∞–Ω–∏—Ü—ã sprints[currentSprintIndex].firstSummary –∏ sprints[currentSprintIndex].lastSummary 
  // –Ω–æ –≤ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∏ –≤ –∫–∞–∫–æ–º –∫–æ–º–º–∏—Ç–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞
  const searchCommitLimiter = Math.ceil(Math.log2(currentSprintCommits.length) + 2)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫ –∫–∞–∫–æ–º—É –∫–æ–º–º–∏—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å—É–º–º–∞—Ä–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –∫ —Ä–∞–∑–º–µ—Ä—É —ç—Ç–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
  let binarySearchCommit = (summaryElement, sprintArray) => {
    let counter = searchCommitLimiter
    let left = 0;
    let right = sprintArray.length;
    let middle = Math.floor((left + right) / 2);
    while (counter != 0) {
      if (summaryIsLess(sprintArray[middle], summaryElement.id)) { 
        left = middle
        middle = Math.floor((left + right) / 2);
      } else if (summaryIsMore(sprintArray[middle], summaryElement.id)) {
        right = middle;
        middle = Math.floor((left + right) / 2);
      } else {
         sprintArray[middle].commitSize += summaryElement.added + summaryElement.removed
         break
      }
      counter--
      }
    }

  // –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ —Å summary, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø—Ä–∏–Ω—Ç–∞ –∏ 
  // –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤           (–Ω–µ–ª–µ–≥–∫–∞ –±—ã–ª–∞ 4 –ø–æ–¥–∑–∞–¥–∞—á–∞, —ç—Ç–æ —É–∂ —Ç–æ—á–Ω–æ)
  summary.forEach(summ => {
    if ( //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, –≤—Ö–æ–¥–∏—Ç –ª–∏ summary –≤ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø—Ä–∏–Ω—Ç–∞
      summ.id <= sprints[currentSprintIndex].lastSummary && 
      summ.id >= sprints[currentSprintIndex].firstSummary
      ) { // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ 
        binarySearchCommit(summ, currentSprintCommits)
    } else if (
      summ.id <= sprints[previousSprintIndex].lastSummary &&
      summ.id >= sprints[previousSprintIndex].firstSummary
      ) {
        binarySearchCommit(summ, previousSprintCommits)
    }
  });

  // –ü–æ–¥—Å—á—ë—Ç –∫–æ–º–º–∏—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤

  /*
    —Å—É–º–º–∞ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å—Å—è –º–µ–Ω—å—à–µ –æ–±—â–µ–π —Å—É–º–º—ã commits,
    —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–º–∏—Ç—ã —Å –Ω—É–ª—ë–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—Å—ë –µ—â—ë –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –∫–æ–º–º–∏—Ç—ã
    –Ω–æ –æ–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –Ω–∏ –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö.
    –ü–æ –º–∞–∫–µ—Ç—É —É–∫–∞–∑–∞–Ω —Ä–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–æ–≤ 1 - 100 —Å—Ç—Ä–æ–∫.
    –ò—Ç–∞–∫, –Ω—É–ª–µ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –Ω–æ –≤—Ö–æ–¥—è—Ç
    –≤ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞, –ø–æ—ç—Ç–æ–º—É 
    –≤–æ–∑–º–æ–∂–Ω—ã —Å–∏—Ç—É–∞—Ü–∏–∏ —Ç–∏–ø–∞ (–≤—Å–µ–≥–æ 5 –∫–æ–º–º–∏—Ç–æ–≤!) –∏ –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–º–º–∏—Ç—É –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ.
    –Ø –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç! –ü—Ä–æ —Ç–æ, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å –Ω–µ —Å–∫–∞–∑–∞–Ω–æ –≤ —Ç–∑! 
  */
  currentSprintCommits.forEach(commit => {
    if (commit.commitSize > 1000) {
      sprints[currentSprintIndex].hugeCommits += 1
    } else if (commit.commitSize > 500) {
      sprints[currentSprintIndex].bigCommits += 1
    } else if (commit.commitSize > 100) {
      sprints[currentSprintIndex].smallCommits += 1
    } else if (commit.commitSize > 0 ) {
      sprints[currentSprintIndex].tinyCommits += 1
    }
  })

  previousSprintCommits.forEach(commit => {
    if (commit.commitSize > 1000) {
      sprints[previousSprintIndex].hugeCommits += 1
    } else if (commit.commitSize > 500) {
      sprints[previousSprintIndex].bigCommits += 1
    } else if (commit.commitSize > 100) {
      sprints[previousSprintIndex].smallCommits += 1
    } else if (commit.commitSize > 0 ) {
      sprints[previousSprintIndex].tinyCommits += 1
    }
  })

  // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã

  // –§-–∏—è –¥–æ–±–∞–≤–ª—è—é—â–∞—è –∑–Ω–∞–∫ + –∫ —á–∏—Å–ª—É 
  function getSign(Num) {
    if (Num > 0){
      return "+" + Num;
    } else {
      return Num;
    }
  }

  // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ differenceNumber
  const differenceNumber = sprints[currentSprintIndex].commits - sprints[previousSprintIndex].commits
  // console.log(sprints[currentSprintIndex].commits)
  // console.log(sprints[currentSprintIndex].hugeCommits +
  //   sprints[currentSprintIndex].bigCommits +
  //   sprints[currentSprintIndex].smallCommits +
  //   sprints[currentSprintIndex].tinyCommits
  //   )
  const diagram = {
      "alias": "diagram",
      "data": {
        "title": "–†–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–æ–≤",
        "subtitle": sprints[currentSprintIndex].name,
        "totalText": `${sprints[currentSprintIndex].commits} ${declOfNum(sprints[currentSprintIndex].commits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`,
        "differenceText": `${getSign(differenceNumber)} —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞`,
        "categories": [
          {
            "title": "> 1001 —Å—Ç—Ä–æ–∫–∏",
            "valueText": `${sprints[currentSprintIndex].hugeCommits} ${declOfNum(sprints[currentSprintIndex].hugeCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`,
              "differenceText": `${getSign(sprints[currentSprintIndex].hugeCommits - sprints[previousSprintIndex].hugeCommits)} ${declOfNum(sprints[currentSprintIndex].hugeCommits - sprints[previousSprintIndex].hugeCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`
        },
          {
            "title": "501 ‚Äî 1000 —Å—Ç—Ä–æ–∫", 
            "valueText": `${sprints[currentSprintIndex].bigCommits} ${declOfNum(sprints[currentSprintIndex].bigCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`,
            "differenceText": `${getSign(sprints[currentSprintIndex].bigCommits - sprints[previousSprintIndex].bigCommits)} ${declOfNum(sprints[currentSprintIndex].bigCommits - sprints[previousSprintIndex].bigCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`
          },
          {
            "title": "101 ‚Äî 500 —Å—Ç—Ä–æ–∫",
            "valueText": `${sprints[currentSprintIndex].smallCommits} ${declOfNum(sprints[currentSprintIndex].smallCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`,
            "differenceText": `${getSign(sprints[currentSprintIndex].smallCommits - sprints[previousSprintIndex].smallCommits)} ${declOfNum(sprints[currentSprintIndex].smallCommits - sprints[previousSprintIndex].smallCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`},
          {
            "title": "1 ‚Äî 100 —Å—Ç—Ä–æ–∫",
            "valueText": `${sprints[currentSprintIndex].tinyCommits} ${declOfNum(sprints[currentSprintIndex].tinyCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`,
            "differenceText": `${getSign(sprints[currentSprintIndex].tinyCommits - sprints[previousSprintIndex].tinyCommits)} ${declOfNum(sprints[currentSprintIndex].tinyCommits - sprints[previousSprintIndex].tinyCommits, ["–∫–æ–º–º–∏—Ç", "–∫–æ–º–º–∏—Ç–∞", "–∫–æ–º–º–∏—Ç–æ–≤"])}`}
        ]
      }}

  // –Ω–µ –∑–Ω–∞—é, –ø–æ—á–µ–º—É –Ω–æ–≤—ã–µ —Å–ø—Ä–∏–Ω—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 0:05:02, 
  // –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü sum –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ - –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å–ø—Ä–∏–Ω—Ç–∞, –∞ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å

  const activityStat = []
    for (let i = 0; i < 7; ++i) {
      activityStat.push([])
      for (let j = 0; j < 24; ++j) {
        activityStat[i].push(0)
      }
    }

    // –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  currentSprintCommitsWithEmptyCommits.forEach(commit => {
    let time = new Date(commit.timestamp)
    let dayWeek = [0, 1, 2, 3, 4, 5, 6][time.getDay()]
    activityStat[dayWeek][time.getHours()] += 1 
  });

  const activity = {
    "alias": "activity",
    "data": {
      "title": `–ö–æ–º–º–∏—Ç—ã, ${+currentSprintIndex + 1} –Ω–µ–¥–µ–ª—è`,
      "subtitle": sprints[currentSprintIndex].name,
      "data": {
        "mon": activityStat[1],
        "tue": activityStat[2],
        "wed": activityStat[3],
        "thu": activityStat[4],
        "fri": activityStat[5],
        "sat": activityStat[6],
        "sun": activityStat[0]
      }
    }
  }        
  return JSON.parse(JSON.stringify([leaders, vote, chart, diagram, activity])); 

} catch(c) {
    console.log(c)
    return []
  }

};

module.exports = { prepareData };
